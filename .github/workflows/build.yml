name: Build boxes

on:
  workflow_call:
    inputs:
      build-runner:
        type: string
        default: macos-12
      upload-box:
        type: boolean
        default: true

jobs:
  gov:
    name: Get OS versions
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      os-versions: ${{ steps.get-os-versions.outputs.os-versions }}
    steps:
      - uses: actions/checkout@v3
      - id: get-os-versions
        run: |
          VERSIONS=$(jq -cR 'split(" ")' os_vers)
          OUTPUT="os-versions=$VERSIONS"
          echo "Setting '$OUTPUT'"
          echo "$OUTPUT" >> $GITHUB_OUTPUT
  gbt:
    name: Get build types
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      build-types: ${{ steps.get-build-types.outputs.build-types }}
    steps:
      - uses: actions/checkout@v3
      - id: get-build-types
        run: |
          BUILDS=$(jq -cR 'split(" ")' builds)
          OUTPUT="build-types=$BUILDS"
          echo "Setting '$OUTPUT'"
          echo "$OUTPUT" >> $GITHUB_OUTPUT
  run-packer:
    name: Build & test box
    runs-on: ${{ inputs.build-runner }}
    timeout-minutes: 30
    needs: [gov, gbt]
    env:
      MAKE_VARS: ~
    strategy:
      fail-fast: false
      matrix:
        build: ${{ fromJSON(needs.gbt.outputs.build-types) }}
        version: ${{ fromJSON(needs.gov.outputs.os-versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Debug on runner (When re-run with "Enable debug logging" checked)
        if: runner.debug
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
      - name: Install virtualisation software
        env:
          TECHNEG_VAGRANT_PROVIDER: ${{ startsWith(matrix.build, 'qemu') && 'qemu-system-x86' || 'virtualbox' }}
        if: ${{ !startsWith(runner.name, 'self') }}
        run: |
          kernel_name=$(uname -s)
          if [ "$kernel_name" == "Linux" ]; then
            sudo apt update
            sudo apt --yes install vagrant $TECHNEG_VAGRANT_PROVIDER
          elif [ "$kernel_name" == "Darwin" ]; then
            brew update
            brew install make
          fi
      - name: Prepare environment
        if: startsWith(matrix.build, 'qemu')
        run: |
          kernel_name=$(uname -s)
          if [ "$kernel_name" == "Linux" ]; then
            echo PKR_VAR_accelerator=kvm >> $GITHUB_ENV
          fi
      - name: Run Packer
        id: packer
        env:
          PACKER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gmake ${{ env.MAKE_VARS }} -f ${{ matrix.build }}/Makefile ${{ matrix.version }}
      - name: Prepare Vagrant
        if: startsWith(matrix.build, 'qemu')
        run: vagrant plugin install vagrant-qemu
      - name: Install Test Kitchen
        if: ${{ !startsWith(runner.name, 'self') }}
        run: |
          echo ::group::Installing Chef Workstation
          kernel_name=$(uname -s)
          if [ "$kernel_name" == "Linux" ]; then
            wget --no-verbose https://packages.chef.io/files/stable/chef-workstation/23.7.1042/ubuntu/22.04/chef-workstation_23.7.1042-1_amd64.deb
            sudo dpkg --install chef-workstation_23.7.1042-1_amd64.deb
          elif [ "$kernel_name" == "Darwin" ]; then
            sudo echo "Refresh sudo cached credential"
            brew install chef-workstation
          fi
          echo ::endgroup::
          chef -v
      - name: Prepare Test Kitchen
        if: startsWith(matrix.build, 'vbox')
        run: echo TECHNEG_VAGRANT_PROVIDER=virtualbox >> $GITHUB_ENV
      - name: Run Test Kitchen
        continue-on-error: ${{ endsWith(github.repository, 'tinycore_linux') }}
        env:
          TECHNEG_VAGRANT_BOX: ${{ steps.packer.outputs.vagrant-box }}
        run: kitchen test
      - name: Upload to Vagrant Cloud (On GitHub default branch only)
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        env:
          PACKER_COMMAND: ${{ inputs.upload-box && 'build -timestamp-ui' || 'validate' }}
          VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
        run: |
          packer $PACKER_COMMAND -var version=$(bin/version) -var prefix= -var no_release=false -var box_dir=box/${{ matrix.build }} upload
